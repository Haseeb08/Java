1) Your first step in this mini-project is to write the three methods in the VigenereBreaker class. Specifically you should do the following:

Write the public method sliceString, which has three parameters—a String message, representing the encrypted message, an integer whichSlice, indicating the index the slice should start from, and an integer totalSlices, indicating the length of the key. This method returns a String consisting of every totalSlices-th character from message, starting at the whichSlice-th character.

2)*Create a new FileResource using its default constructor (which displays a dialog for you to select a file to decrypt).
*Use that FileResource’s asString method to read the entire contents of the file into a String.
*You should make a new FileResource to read from the English dictionary file that we have provided. [Use the tryKeyLength method that you just wrote to find the key for the message you read in. For now, you should just pass ‘e’ for mostCommon.]
*You should use your readDictionary method to read the contents of that file into a HashSet of Strings. [You should create a new VigenereCipher, passing in the key that tryKeyLength found for you.]
*You should use the breakForLanguage method that you just wrote to decrypt the encrypted message. [You should use a VigenereCipher object to decrypt the encrypted message.]
*Finally, you should print out the decrypted message!

3)In the VigenereBreaker class, write the public method breakForAllLangs, which has two parameters—a String encrypted, and a HashMap, called languages, mapping a String representing the name of a language to a HashSet of Strings containing the words in that language. Try breaking the encryption for each language, and see which gives the best results! Remember that you can iterate over the languages.keySet() to get the name of each language, and then you can use .get() to look up the corresponding dictionary for that language. You will want to use the breakForLanguage and countWords methods that you already wrote to do most of the work (it is slightly inefficient to re-count the words here, but it is simpler, and the inefficiency is not significant). You will want to print out the decrypted message as well as the language that you identified for the message.

